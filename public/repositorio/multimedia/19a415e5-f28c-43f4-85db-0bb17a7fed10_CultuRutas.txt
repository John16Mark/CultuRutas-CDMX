=== ESTRUCTURA NUEVA DEL PROYECTO ===

> node_modules
> public
|
|------->eventos
|
|------->icons
|		|-------*monumento.png
|		|-------*museo.png
|		|-------*piramide.png
|		|-------*museum.png
|		|-------*default.png
|		|-------*archaeological_zone.png
|------->imgs
|		|-------*no_image.jpg
|		|-------*alert_error.png
|		|-------*alert_success.png
|------->lugares
|		|------->acuario_interactivo
|		|			|-------*1.jpg
|		|			|-------*2.jpg
|		|			|-------*3.jpg
|		|			|-------*4.jpg
|		|------->biblioteca_de_mexico\imagenes
|		|			|-------*1.jpg
|		|			|-------*2.jpg
|		|			|-------*3.jpg
|		|			|-------*4.jpg
|		|------->templo_mayor_de_mexicotenochtitlan\imagenes
|		|			|-------*1.jpg
|		|------->palacio_nacional
|					|-------*1.jpg
|------->favicon.ico
|------->index.html
|------->logo_stretched.png
|------->logo.png
|------->logo192.png
|------->logo512.png
|------->manifest.json
|------->robots.txt
	
> src
|------->components
|		|------->Alerta
|		|	|-------*Alerta.jsx
|		|------->Footer
|		|	|-------*Footer.css
|		|	|-------*Footer.jsx
|		|------->NavBar
|		|	|-------*NavBar.css
|		|	|-------*NavBar.jsx
|		|-------*ButtonsMod.jsx
|		|-------*ThemeMaterialUI.js
|
|------->controllers
|		|-------*login_cont.js
|		|-------*lugar_cont.js             
|    		|-------*register_cont.js         
|    		|-------*verificacion_cont.js       
|
|------->css
|		|-------*var.css
|
|------->data
|		|-------*1_CultuRutas.sql
|		|-------*2_procesos.sql
|		|-------*3_Inserciones_sitios.sql
|		|-------*cambio_de_base.py
|		|-------*intento_base.sql
|
|------->img
|		|-------*background-home.jpg
|		|-------*banner.png
|		|-------*crema2.png
|		|-------*fondo_1.jpg
|		|-------*fondo_oscuro1.jpg
|		|-------*maps.webp
|
|------->models
|		|------->MySQL
|			|-------*db.js
|			|-------*login_model.js      
|			|-------*lugar_model.js         
|			|-------*register_model.js         
|------->pages
|		|------->gestor
|		|	|------->PlacesCRUD.jsx
|		|
|		|------->home
|		|	|------->components
|		|			|------->TarjetaLugar.jsx
|		|	|-------*home.css
|		|	|-------*Home.jsx
|		|------->login
|		|	|-------*login_handler.js
|		|	|-------*Login.css
|		|	|-------*Login.jsx
|		|
|		|------->lugarDetalles
|		|	|------->components
|		|		|-------*DescripcionLugar.css
|		|		|-------*DescripcionLugar.jsx
|		|		|-------*HeaderLugar.css
|		|		|-------*HeaderLugar.jsx
|		|		|-------*ImagenesLugar.jsx
|		|	|------->LugarDetalles.css
|		|	|------->LugarDetalles.jsx
|		|
|		|------->lugares
|		|	|------->components
|		|		|-------*Dropdown.jsx
|		|	|-------*Lugares.jsx
|		|
|		|------->lugarRepositorio
|		|	|------->components
|		|		|-------*DescargasGrid.jsx
|		|	|-------*LugarRepositorio.css
|		|	|-------*LugarRepositorio.jsx
|		|
|		|------->mapa
|		|	|-------*Mapa.jsx
|		|------->register
|			|-------*register_handler.js
|			|-------*Register.css
|			|-------*Register.jsx
|------->routes
|		|-------*AppRouter.js   
|		|-------*lugar.js        
|
|------->utils
|		|-------*validaciones.js
|		|-------*mailer.js
|		|-------*validaciones.js
|
|------->App.css
|------->App.js
|------->App.test.ks
|------->index.css
|------->index.js
|------->reportWebVitals.js
|------->setupTests.js
|------->logo.svg

*.env
*gitignore
*package-lock.json
*package.json
*README.md
*server.js


Contenido de archivos relevantes:
=====server.js====

const axios = require('axios');
const express = require('express');
const path = require('path');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
require('dotenv').config();

const register_cont = require('./src/controllers/register_cont');
const login_cont = require('./src/controllers/login_cont');
const lugares_cont = require('./src/controllers/lugar_cont');
const verificacion_cont = require('./src/controllers/verificacion_cont');
const lugarRoutes = require('./src/routes/lugar');




const app = express();
app.use(cors());
app.use(express.json());
app.use(bodyParser.json());
app.use(cookieParser());

app.use(express.urlencoded({ extended: true })); // OK para formularios normales


app.use('/api/lugares', lugarRoutes);

const PORT = 3001;

// ¡Esto es importante! Sirve la carpeta "public"
app.use('/lugares', express.static(path.join(__dirname, 'public', 'lugares')));
app.use('/imgs', express.static(path.join(__dirname, 'public', 'imgs')));

app.post('/register', register_cont.registro_regular);
app.post('/login', login_cont.login);
// Confirmar correo
app.get('/confirmar-correo', verificacion_cont.confirmarCorreo);

app.post('/get_lugares', lugares_cont.get_todos);
app.post('/get_detalles_lugar', lugares_cont.get_detalles_lugar);
app.post('/get_eventos_lugar', lugares_cont.get_eventos_lugar);
app.post('/get_repositorio_lugar', lugares_cont.get_repositorio_lugar);

app.post('/is_logged', (req, res) => {
  // // Recibir el valor de id y de un token, para verificar si el token es válido
  //console.log("is_logged, req: ", req);
  const {id, token} = req.body;
  //console.log("is_logged, token: ", token);
  console.log("is_logged, req.body: ", req.body);
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if(err){
      res.json({logged: false, decoded: null});
    } else {
      if(decoded)
        res.json({logged: true, decoded});
      else
        res.json({logged: false, decoded: null});
    }
    console.log("decoded", decoded);
  });
});

app.listen(PORT, () => {
  console.log(`Servidor en funcionamiento en http://localhost:${PORT}`);
});



=====package.json====

{
  "name": "culturutas-cdmx",
  "version": "0.1.0",
  "private": true,
  "overrides": {
    "react-scripts": {
      "@svgr/webpack": "8.1.0",
      "typescript": "4.9.5",
      "postcss": "8.4.38"
    }
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^7.1.1",
    "@mui/material": "^7.1.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@vis.gl/react-google-maps": "^1.4.2",
    "axios": "^1.9.0",
    "bcrypt": "^6.0.0",
    "body-parser": "^2.2.0",
    "concurrently": "^9.1.2",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "jsonwebtoken": "^9.0.2",
    "leaflet": "^1.9.4",
    "multer": "^2.0.1",
    "mysql2": "^3.14.1",
    "nodemailer": "^7.0.3",
    "nodemon": "^3.1.10",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-leaflet": "^5.0.0",
    "react-router-dom": "^6.27.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "concurrently \"npm run server\" \"react-scripts start\"",
    "server": "nodemon server.js",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/dotenv": "^6.1.1"
  }
}

=======.env=====
EMAIL_USER=alberto01707@gmail.com
EMAIL_PASS=vcry jcrq fafs ecgr
BACKEND_URL=http://localhost:3001
FRONTEND_URL=http://localhost:3000
JWT_SECRET=una_clave_secreta_muy_fuerte_aqui_12345

=====2_procesos.sql====
-- En MySQL o en tu archivo 2_procesos.sql
DELIMITER //
CREATE PROCEDURE visitante_registro (
   IN p_correo VARCHAR(320),
   IN p_contrasena VARCHAR(100),
   IN p_token VARCHAR(64)
)
BEGIN
   DECLARE existente INT;

   SELECT COUNT(*) INTO existente
   FROM Visitante
   WHERE correo_electronico = p_correo;

   IF existente = 0 THEN
      INSERT INTO Visitante (
        correo_electronico, contrasena, correo_verificado, token_verificacion
      )
      VALUES (
        p_correo, p_contrasena, FALSE, p_token
      );

      SELECT 'registro_exitoso' AS 'success';
   ELSE
      SELECT 'correo_ya_registrado' AS ERROR;
   END IF;
END //
DELIMITER ;




DELIMITER //
CREATE PROCEDURE visitante_login (
   IN p_correo VARCHAR(320)
)
BEGIN
   DECLARE v_id INT;
   DECLARE v_contrasena VARCHAR(100);
   DECLARE v_correo_verificado BOOLEAN;
   DECLARE v_token VARCHAR(64);
   DECLARE v_fecha_creacion TIMESTAMP;

   SELECT id_visitante, contrasena, correo_verificado, token_verificacion, fecha_creacion
   INTO v_id, v_contrasena, v_correo_verificado, v_token, v_fecha_creacion
   FROM Visitante
   WHERE correo_electronico = p_correo;

   IF v_id IS NULL THEN
      SELECT 'correo_no_registrado' AS ERROR;
   ELSE
      SELECT
         v_id AS id,
         v_contrasena AS contrasena,
         v_correo_verificado AS correo_verificado,
         v_token AS token,
         v_fecha_creacion AS fecha_creacion;
   END IF;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE gestor_login (
   IN p_correo VARCHAR(320)
)
BEGIN
   DECLARE v_id INT;
   DECLARE v_contrasena VARCHAR(100);
   DECLARE v_correo_verificado BOOLEAN;
   DECLARE v_token VARCHAR(64);
   DECLARE v_fecha_creacion TIMESTAMP;

   SELECT id_gestor, contrasena, correo_verificado, token_verificacion, fecha_creacion
   INTO v_id, v_contrasena, v_correo_verificado, v_token, v_fecha_creacion
   FROM Gestor
   WHERE correo_electronico = p_correo;

   IF v_id IS NULL THEN
      SELECT 'correo_no_registrado' AS error;
   ELSE
      SELECT
         v_id AS id,
         v_contrasena AS contrasena,
         v_correo_verificado AS correo_verificado,
         v_token AS token,
         v_fecha_creacion AS fecha_creacion;
   END IF;
END //
DELIMITER ;

-- Nuevo procedimiento para obtener sitios de un gestor
DELIMITER //
CREATE PROCEDURE obtener_sitios_gestor (
   IN p_id_gestor INT
)
BEGIN
   SELECT * FROM Sitio_turistico_historico
   WHERE id_gestor = p_id_gestor;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE generar_token_recuperacion (
    IN p_correo VARCHAR(320),
    IN p_tipo_usuario ENUM('gestor', 'visitante')
)
BEGIN
    DECLARE v_id INT;
    DECLARE token_generado VARCHAR(64);

    IF p_tipo_usuario = 'visitante' THEN
        SELECT id_visitante INTO v_id FROM Visitante WHERE correo_electronico = p_correo;
    ELSE
        SELECT id_gestor INTO v_id FROM Gestor WHERE correo_electronico = p_correo;
    END IF;

    IF v_id IS NOT NULL THEN
        SET token_generado = UUID();

        INSERT INTO Tokens_Recuperacion (
            id_usuario,
            token,
            tipo_usuario,
            fecha_expiracion,
            utilizado
        ) VALUES (
            v_id,
            token_generado,
            p_tipo_usuario,
            DATE_ADD(NOW(), INTERVAL 1 HOUR),
            FALSE
        );

        SELECT token_generado AS token;
    ELSE
        SELECT 'correo_no_registrado' AS error;
    END IF;
END //
DELIMITER ;


